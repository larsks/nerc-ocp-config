#!/usr/bin/env python3

import argparse
import json
import subprocess
import logging

from pathlib import Path

SCHEMADIR = Path("./schemas")
LOG = logging.getLogger(__name__)


def generate_kustomization():
    LOG.info("generating %s/kustomization.yaml", SCHEMADIR)
    (SCHEMADIR / "kustomization.yaml").unlink()
    subprocess.run(
        ["kustomize", "create", "--autodetect", "--recursive"],
        cwd=SCHEMADIR,
        check=True,
    )


def fetch_schemas():
    LOG.info("fetching schemas")
    res = subprocess.run(
        ["kustomize", "openapi", "fetch"], stdout=subprocess.PIPE, check=True
    )
    return json.loads(res.stdout)


def split_schemas(all_schemas):
    LOG.info("splitting schemas")
    for name, schema in all_schemas["definitions"].items():
        LOG.debug("processing %s", name)
        path = SCHEMADIR / Path(name.replace(".", "/"))
        path.mkdir(parents=True, exist_ok=True)

        wrapper = {
            "apiVersion": "v3",
            "kind": "OpenAPISchema",
            "metadata": {
                "name": name,
            },
            "definitions": {
                name: schema,
            },
        }

        with (path / "schema.json").open("w") as fd:
            json.dump(wrapper, fd, indent=2)
            fd.write("\n")
        with (path / "kustomization.yaml").open("w") as fd:
            kustomization = {
                "apiVersion": "kustomize.config.k8s.io/v1beta1",
                "kind": "Kustomization",
                "resources": ["schema.json"],
            }
            json.dump(kustomization, fd, indent=2)
            fd.write("\n")

    with (SCHEMADIR / "kustomization.yaml").open("w") as fd:
        resources = [str(p.parent) for p in SCHEMADIR.rglob("kustomization.yaml")]
        kustomization = {
            "apiVersion": "kustomize.config.k8s.io/v1beta1",
            "kind": "Kustomization",
            "resources": resources,
        }
        json.dump(kustomization, fd, indent=2)
        fd.write("\n")


def parse_args():
    p = argparse.ArgumentParser()
    p.add_argument(
        "--no-kustomize",
        "-K",
        action="store_true",
        help="Do not regenerate kustomization.yaml",
    )
    p.add_argument(
        "--no-fetch",
        "-F",
        action="store_true",
        help="Do not fetch new schemas from Kubernetes API",
    )
    p.add_argument(
        "--verbose",
        "-v",
        action="count",
        default=0,
        help="Increase logging verbosity (may be repeated)",
    )
    return p.parse_args()


def init_logging(args):
    loglevel = next(
        (
            level
            for i, level in enumerate([logging.WARNING, logging.INFO, logging.DEBUG])
            if i == args.verbose
        ),
        logging.DEBUG,
    )
    logging.basicConfig(level=loglevel)


def main():
    args = parse_args()
    init_logging(args)

    if not args.no_fetch:
        split_schemas(fetch_schemas())
    if not args.no_kustomize:
        generate_kustomization()


if __name__ == "__main__":
    main()
